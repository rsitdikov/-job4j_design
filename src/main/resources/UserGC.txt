1. Создан класс User c полями name, age и переопределенным методом finalize.

2. Расчет занимаемой памяти:
JVM хранит для каждого объекта:
•	Заголовок объекта. Если речь идет о 64-х разрядной системе, то размер заголовка — 16 байт;
•	Память для примитивных типов;
•	Память для ссылочных типов;
•	Смещение/выравнивание — несколько неиспользуемых байт,  для того, чтобы адрес в памяти всегда был кратным
машинному слову. В  java размер объекта кратен 8 байтам.
Объект User содержит поля String name и int age.
Поле age занимает 4 байта.
Поле со ссылочной переменной name занимает 4 байта (при размере кучи менее 32 Gb).
Следовательно, заголовок + переменные = 24 байта, выравнивание не требуется.
В связи с тем, что поле name также является объектом, его размер  складывается из размера заголовка и размеров
нестатических полей класса String:
	private final byte value[];
	private final byte coder;
	private boolean hashIsZero;
	private int hash;
Поля  coder, hashIsZero и hash занимают 1 + 1 + 4 = 6 байтов
Поле value[] является ссылочной переменной и занимает 4 байта.
Размер объекта name составляет 16 + 6 + 4 = 26 байтов, с учетом выравнивания – 32 байта.
В свою очередь,  value[] также является объектом  и содержит:
Заголовок: 16 байтов + 4 байта на длину массива = 20 байт
 Примитивы byte: 2 байта на символ. Для name в диапазоне от “name 0” по “name 9” – 12 байтов,
в  диапазоне от “name 10” по “name 99” – 14 байтов, в  диапазоне от “name 100” по “name 255” – 16 байтов.
Выравнивание для кратности 8: соответственно 4, 2 и 0 байтов.
Размер массива value[] -  36 байтов.
В  таком случае,  при создании каждого объекта User , будет занято 24 + 32 + 36 = 92 байта.

3.  Пустой объект без полей содержит только заголовок объекта. Его размер, для 64х – разрядной системы  - 16 байтов,
для 32х – разрядной – 8 байтов.

4. За счет ключа Xmx было выставлено ограничение доступной памяти до 4 мб, сборщик мусора вызывается самостоятельно
виртуальной машиной.
5. В методе main циклически создаются объекты класса User, при этом заполняется память.
При уменьшении размера памяти до определенного уровня, система вызывает GC.
В связи с тем, что на созданные объекты  отсутствуют ссылки в программе, GC  их помечает для удаления.  У отмеченных
объектов вызывается метод finalize(), затем они удаляются из кучи.

